#include <stdio.h>
#include <math.h>
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/syscall.h>
#include <time.h>
#define ROW (50)
#define COL ROW

struct timespec ts;
static int start_time, elapsed_time = 0, cpuid = 0;

struct sched_attr {
   uint32_t size;
   uint32_t sched_policy;
   uint64_t sched_flags;
   int32_t  sched_nice;
   uint32_t sched_priority;
   uint64_t sched_runtime;
   uint64_t sched_deadline;
   uint64_t sched_period;
};

static int sched_setattr(pid_t pid, const struct sched_attr* attr, unsigned int flags) {
   return syscall(SYS_sched_setattr, pid, attr, flags);
}

//  signal handler
void interrupt() {
   printf("Process #%02d Interrupted : %dms\n", cpuid, elapsed_time);
   exit(0);
}

int calc(int time, int cpu) {
   int matrixA[ROW][COL], matrixB[ROW][COL], matrixC[ROW][COL];
   int i, j, k, count = 0;
   int q = 0;
   int pid = 0;

   // attr setup for sched_setattr
   int result;
   struct sched_attr attr;
   memset(&attr, 0, sizeof(attr));
   attr.size = sizeof(struct sched_attr);

   attr.sched_priority = 95;
   attr.sched_policy = SCHED_RR;

   // call sched_setattr and exception handling
   result = sched_setattr(getpid(), &attr, 0);
   if (result == -1) {
      perror("Error occurred while calling sched_setattr.\n");
      exit(1);
   }
   //  do fork() as much as cpu parameter
   for (int p = 0; p < cpu - 1; p++) {
      if (pid == 0) {
         printf("\tCreating Process: #%d\n", p + 1);
         pid = fork();
         if (pid == 0) cpuid++;
      }
   }
   //  calc & time-checking part
   while (1) {
      signal(SIGINT, interrupt); // add signal handler
      for (i = 0; i < ROW; i++) {
         for (j = 0; j < COL; j++) {
            for (k = 0; k < COL; k++) matrixC[i][j] += matrixA[i][k] * matrixB[k][j];
         }
      }
      count++;
      clock_gettime(CLOCK_REALTIME, &ts);
      elapsed_time = ((ts.tv_sec % 1000) * 1000 + (ts.tv_nsec / 1000000)) - start_time;

      if (q != trunc(elapsed_time / 100))
         printf("PROCESS #%02d count %02d 100ms\n", cpuid, count);

      if (elapsed_time > time * 1000) {
         printf("DONE!! PROCESS #%02d :%02d %d ms\n", cpuid, count, elapsed_time);
         return 0;
      }
      q = elapsed_time / 100;
   }
}

int main(int argc, char* argv[]) {
   printf("** START: process = %d Time = %d s\n", atoi(argv[2]), atoi(argv[1]));

   //  record started time
   clock_gettime(CLOCK_REALTIME, &ts);
   start_time = (ts.tv_sec % 1000) * 1000 + (ts.tv_nsec / 1000000);

   calc(atoi(argv[1]), atoi(argv[2]));
   return 0;
}